from typing import List, NewType, Union, Any, Optional, Tuple, TypeVar

class Tensor_f32(TensorType): ...
class Tensor_f64(TensorType): ...
class Tensor_u8(TensorType): ... 
class Tensor_u16(TensorType): ...
class Tensor_u32(TensorType): ...
class Tensor_u64(TensorType): ...
class Tensor_i8(TensorType): ...
class Tensor_i16(TensorType): ...
class Tensor_i32(TensorType): ...
class Tensor_i64(TensorType): ...

class TensorType:
    def __init__(self, data_flatten: List, shape: List[int])->None: ...
    @classmethod
    def randn(cls, shape: List[int], seed: Optional[int] = None)->"TensorType": ...
    @classmethod
    def zeros(cls, shape: List[int])->"TensorType": ...
    @classmethod
    def ones(cls, shape: List[int])->"TensorType": ...
    @classmethod
    def full(cls, shape: List[int], fill_value)->"TensorType": ...
    @classmethod
    def arange(cls, start, stop, step = None)->"TensorType": ...
    def reprstr(self, spacing_size: int)->str: ...
    def __repr__(self) -> str: ...
    def __add__(self, other: "TensorType")->"TensorType": ...
    def __iadd__(self, other: "TensorType")->"TensorType": ...
    def __sub__(self, other: "TensorType")->"TensorType": ...
    def __isub__(self, other: "TensorType")->"TensorType": ...
    def __mul__(self, other: "TensorType")->"TensorType": ...
    def __imul__(self, other: "TensorType")->"TensorType": ...
    def __div__(self, other: "TensorType")->"TensorType": ...
    def __idiv__(self, other: "TensorType")->"TensorType": ...
    def __matmul__(self, other: "TensorType")->"TensorType": ...
    def matmul(self, other: "TensorType")->"TensorType": ...
    def dot(self, other: "TensorType")->"TensorType": ...
    @property
    def shape(self)->List[int]: ...
    @property
    def strides(self)->List[int]: ...
    @property
    def ndim(self)->int: ...
    @property
    def size(self)->int: ...
    def get_by_slicing(self, slice: List[Tuple[Optional[int], Optional[int], Optional[int]]])->"TensorType": ...
    def set_by_slicing(self, slice: List[Tuple[Optional[int], Optional[int], Optional[int]]], data_flatten: List[int], shape_for_assert: List[int]): ...
    def item(self)->int: ...
    def reshape_(self, shape: List[int]): ...
    def reshape(self, shape: List[int])->"TensorType": ...
    @property
    def T(self)->"TensorType": ...
    def transpose(self, axis_order: List[int])->"TensorType": ...
    
    
    def tobytes(self)->List: ...
    @classmethod
    def frombytes(self, buffer: List)->"TensorType": ...
    def pow_scalar(self, value:float) -> "TensorType": ...
    def pow_scalar_(self, value:float): ...
        
    def mean(self, dim:Optional[int]=None, keepdims:bool=False)->"TensorType": ...
    def sum(self, dim:Optional[int]=None, keepdims:bool=False)->"TensorType": ...
    def max(self, dim:Optional[int]=None, keepdims:bool=False)->"TensorType": ...
    def min(self, dim:Optional[int]=None, keepdims:bool=False)->"TensorType": ...
    def argmax(self, dim:Optional[int]=None, keepdims:bool=False)->"TensorType": ...
    def argmin(self, dim:Optional[int]=None, keepdims:bool=False)->"TensorType": ...